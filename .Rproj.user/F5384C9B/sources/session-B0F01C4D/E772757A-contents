// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// movementfunc_cpp
arma::vec movementfunc_cpp(const int AGE, const int MONTH, const int MaxCell, arma::mat AdultMove, arma::cube YearlyTotal);
RcppExport SEXP _FishPopModel_movementfunc_cpp(SEXP AGESEXP, SEXP MONTHSEXP, SEXP MaxCellSEXP, SEXP AdultMoveSEXP, SEXP YearlyTotalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type AGE(AGESEXP);
    Rcpp::traits::input_parameter< const int >::type MONTH(MONTHSEXP);
    Rcpp::traits::input_parameter< const int >::type MaxCell(MaxCellSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AdultMove(AdultMoveSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type YearlyTotal(YearlyTotalSEXP);
    rcpp_result_gen = Rcpp::wrap(movementfunc_cpp(AGE, MONTH, MaxCell, AdultMove, YearlyTotal));
    return rcpp_result_gen;
END_RCPP
}
// mortalityfunc_cpp
Rcpp::List mortalityfunc_cpp(const int AGE, const int MaxCell, const int MONTH, const int YEAR, const double NatMort, arma::mat Weight, arma::cube Selectivity, arma::cube YearlyTotal, arma::cube Effort);
RcppExport SEXP _FishPopModel_mortalityfunc_cpp(SEXP AGESEXP, SEXP MaxCellSEXP, SEXP MONTHSEXP, SEXP YEARSEXP, SEXP NatMortSEXP, SEXP WeightSEXP, SEXP SelectivitySEXP, SEXP YearlyTotalSEXP, SEXP EffortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type AGE(AGESEXP);
    Rcpp::traits::input_parameter< const int >::type MaxCell(MaxCellSEXP);
    Rcpp::traits::input_parameter< const int >::type MONTH(MONTHSEXP);
    Rcpp::traits::input_parameter< const int >::type YEAR(YEARSEXP);
    Rcpp::traits::input_parameter< const double >::type NatMort(NatMortSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Weight(WeightSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Selectivity(SelectivitySEXP);
    Rcpp::traits::input_parameter< arma::cube >::type YearlyTotal(YearlyTotalSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Effort(EffortSEXP);
    rcpp_result_gen = Rcpp::wrap(mortalityfunc_cpp(AGE, MaxCell, MONTH, YEAR, NatMort, Weight, Selectivity, YearlyTotal, Effort));
    return rcpp_result_gen;
END_RCPP
}
// recruitmentfunc_cpp
Rcpp::List recruitmentfunc_cpp(const int MaxCell, const int MaxAge, const double BHa, const double BHb, const double PF, arma::mat Mature, arma::mat Weight, arma::vec Settlement, arma::cube YearlyTotal);
RcppExport SEXP _FishPopModel_recruitmentfunc_cpp(SEXP MaxCellSEXP, SEXP MaxAgeSEXP, SEXP BHaSEXP, SEXP BHbSEXP, SEXP PFSEXP, SEXP MatureSEXP, SEXP WeightSEXP, SEXP SettlementSEXP, SEXP YearlyTotalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type MaxCell(MaxCellSEXP);
    Rcpp::traits::input_parameter< const int >::type MaxAge(MaxAgeSEXP);
    Rcpp::traits::input_parameter< const double >::type BHa(BHaSEXP);
    Rcpp::traits::input_parameter< const double >::type BHb(BHbSEXP);
    Rcpp::traits::input_parameter< const double >::type PF(PFSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mature(MatureSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Weight(WeightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Settlement(SettlementSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type YearlyTotal(YearlyTotalSEXP);
    rcpp_result_gen = Rcpp::wrap(recruitmentfunc_cpp(MaxCell, MaxAge, BHa, BHb, PF, Mature, Weight, Settlement, YearlyTotal));
    return rcpp_result_gen;
END_RCPP
}
// RunModelfunc_cpp
Rcpp::List RunModelfunc_cpp(const int YEAR, const int MaxAge, const int MaxYear, const int MaxCell, const double NatMort, const double BHa, const double BHb, const double PF, arma::mat AdultMove, arma::mat Mature, arma::mat Weight, arma::vec Settlement, arma::cube YearlyTotal, arma::cube Select, arma::cube Effort);
RcppExport SEXP _FishPopModel_RunModelfunc_cpp(SEXP YEARSEXP, SEXP MaxAgeSEXP, SEXP MaxYearSEXP, SEXP MaxCellSEXP, SEXP NatMortSEXP, SEXP BHaSEXP, SEXP BHbSEXP, SEXP PFSEXP, SEXP AdultMoveSEXP, SEXP MatureSEXP, SEXP WeightSEXP, SEXP SettlementSEXP, SEXP YearlyTotalSEXP, SEXP SelectSEXP, SEXP EffortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type YEAR(YEARSEXP);
    Rcpp::traits::input_parameter< const int >::type MaxAge(MaxAgeSEXP);
    Rcpp::traits::input_parameter< const int >::type MaxYear(MaxYearSEXP);
    Rcpp::traits::input_parameter< const int >::type MaxCell(MaxCellSEXP);
    Rcpp::traits::input_parameter< const double >::type NatMort(NatMortSEXP);
    Rcpp::traits::input_parameter< const double >::type BHa(BHaSEXP);
    Rcpp::traits::input_parameter< const double >::type BHb(BHbSEXP);
    Rcpp::traits::input_parameter< const double >::type PF(PFSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AdultMove(AdultMoveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mature(MatureSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Weight(WeightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Settlement(SettlementSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type YearlyTotal(YearlyTotalSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Select(SelectSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Effort(EffortSEXP);
    rcpp_result_gen = Rcpp::wrap(RunModelfunc_cpp(YEAR, MaxAge, MaxYear, MaxCell, NatMort, BHa, BHb, PF, AdultMove, Mature, Weight, Settlement, YearlyTotal, Select, Effort));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _FishPopModel_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _FishPopModel_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _FishPopModel_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _FishPopModel_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FishPopModel_movementfunc_cpp", (DL_FUNC) &_FishPopModel_movementfunc_cpp, 5},
    {"_FishPopModel_mortalityfunc_cpp", (DL_FUNC) &_FishPopModel_mortalityfunc_cpp, 9},
    {"_FishPopModel_recruitmentfunc_cpp", (DL_FUNC) &_FishPopModel_recruitmentfunc_cpp, 9},
    {"_FishPopModel_RunModelfunc_cpp", (DL_FUNC) &_FishPopModel_RunModelfunc_cpp, 15},
    {"_FishPopModel_rcpparma_hello_world", (DL_FUNC) &_FishPopModel_rcpparma_hello_world, 0},
    {"_FishPopModel_rcpparma_outerproduct", (DL_FUNC) &_FishPopModel_rcpparma_outerproduct, 1},
    {"_FishPopModel_rcpparma_innerproduct", (DL_FUNC) &_FishPopModel_rcpparma_innerproduct, 1},
    {"_FishPopModel_rcpparma_bothproducts", (DL_FUNC) &_FishPopModel_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_FishPopModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
